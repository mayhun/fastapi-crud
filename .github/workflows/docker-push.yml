name: Build & Push to Docker Hub + Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: docker-push
  cancel-in-progress: true

env:
  IMAGE_NAME: mayhun28/fastapi-crud # (username/repository)

jobs:
  # 빌드 & 푸시
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ env.IMAGE_NAME }}:latest
            docker.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify pushed image
        run: |
          docker buildx imagetools inspect docker.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      # ✅ 반드시 필요: 이 잡에서도 레포를 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (선택) 디버깅: 파일이 보이는지 확인
      - name: List workspace
        run: ls -al

      - name: Ensure app dir on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            mkdir -p "$HOME/app"

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.EC2_USER }}/app"

      - name: Deploy on EC2 (pull & restart)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "$HOME/app"

            if [ ! -f .env ]; then
              echo "❌ $PWD/.env 가 없습니다. (.env는 EC2에 수동 업로드)"
              exit 1
            fi

            docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            export IMAGE_TAG=${GITHUB_SHA}
            docker compose up -d --pull always --no-build