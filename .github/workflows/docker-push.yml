name: Build & Push to Docker Hub + Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: docker-push
  cancel-in-progress: true

env:
  IMAGE_NAME: mayhun28/fastapi-crud # (username/repository)

jobs:
  # 빌드 & 푸시
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ env.IMAGE_NAME }}:latest
            docker.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify pushed image
        run: |
          docker buildx imagetools inspect docker.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy on EC2 (pull & restart)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}       # 예: 1.2.3.4
          username: ${{ secrets.EC2_USER }}   # Ubuntu면 'ubuntu'
          key: ${{ secrets.EC2_SSH_KEY }}     # -----BEGIN ... END----- 전체
          script: |
            set -euo pipefail
            echo "whoami: $(whoami) | HOME: $HOME"

            # 앱 디렉토리와 compose 파일 확인
            mkdir -p "$HOME/app"
            cd "$HOME/app"
            if [ ! -f docker-compose.yml ]; then
              echo "❌ $PWD/docker-compose.yml 이 없습니다. (EC2에 운영용 compose를 만들어 주세요)"
              exit 1
            fi

            # Docker Hub 로그인(프라이빗/레이트리밋 대비)
            docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # 이번 커밋 해시를 태그로 주입 → compose에서 ${IMAGE_TAG} 사용
            export IMAGE_TAG=${GITHUB_SHA}

            # 서버에서 빌드 금지, 항상 최신 이미지 pull 후 재기동
            docker compose up -d --pull always --no-build
