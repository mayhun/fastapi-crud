name: Build & Push to Docker Hub + Deploy to EC2

on:
  push:
    branches: [ "main" ]   # main 브랜치에 push될 때 실행
  workflow_dispatch:       # 수동 실행도 가능

concurrency:
  group: docker-push       # 동일 그룹의 워크플로우가 실행되면 이전 것은 취소
  cancel-in-progress: true

env:
  IMAGE_NAME: mayhun28/fastapi-crud # Docker Hub에 올릴 이미지 이름 (username/repo)

jobs:
  # Docker 이미지 빌드 & 푸시
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # 레포지토리 소스코드 가져오기

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Buildx 세팅 (멀티 플랫폼 빌드 가능)

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }} # GitHub Secrets에서 계정 가져오기
          password: ${{ secrets.DOCKERHUB_TOKEN }} # 액세스 토큰 사용

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .                 # 현재 디렉토리 기준
          push: true                 # 빌드 후 푸시
          tags: |                    # 두 개의 태그를 동시에 푸시
            docker.io/${{ env.IMAGE_NAME }}:latest
            docker.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha       # GitHub Actions 캐시 활용
          cache-to: type=gha,mode=max

      - name: Verify pushed image
        run: |
          # 푸시된 이미지가 정상적으로 올라갔는지 확인
          docker buildx imagetools inspect docker.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # EC2 서버에 배포
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push   # build-and-push job이 끝난 후 실행
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # 다시 소스코드 체크아웃 (docker-compose.yml 필요)

      - name: Ensure app dir on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}   # EC2 호스트 IP/도메인
          username: ${{ secrets.EC2_USER }} # EC2 접속 계정
          key: ${{ secrets.EC2_SSH_KEY }}   # SSH 개인키
          script: |
            set -e
            mkdir -p "$HOME/app" # 배포할 디렉토리 생성

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"              # 로컬 파일
          target: "/home/${{ secrets.EC2_USER }}/app" # EC2 경로

      - name: Deploy on EC2 (pull & restart with SHA tag)
        uses: appleboy/ssh-action@v1
        env:
          IMAGE_TAG: ${{ github.sha }}  # GitHub SHA 해시를 태그로 사용
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE_TAG
          script: |
            set -euo pipefail
            cd "$HOME/app"

            # Docker Hub 로그인 (패스워드 안전하게 입력)
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

            # 어떤 태그로 실행되는지 출력
            echo "Using IMAGE_TAG=$IMAGE_TAG"

            # 최신 이미지 pull 후 컨테이너 재시작
            IMAGE_TAG="$IMAGE_TAG" docker compose up -d --pull always --no-build